{"version":3,"sources":["components/Form.js","components/FilterButton.js","components/Todo.js","App.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","addTask","className","htmlFor","type","id","autoComplete","value","onChange","target","FilterButton","isPressed","onClick","setFilter","Todo","newName","setNewName","isEditing","setEditing","editingTemplate","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","FILTER_MAP","Active","task","Completed","All","FILTER_NAMES","Object","keys","App","tasks","setTasks","updatedTasks","map","remainingTasks","filter","editedTaskList","filterList","taskList","tasksNoun","length","headingText","newTask","nanoid","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.05bc3465.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Form(props) {\n\n  const [name, setName] = useState('');\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.addTask(name);\n    setName(\"\");\n  }\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <h2 className=\"label-wrapper\">\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n          We don't need to do a lot but need to start.\n        </label>\n      </h2>\n      <input\n        type=\"text\"\n        id=\"new-todo-input\"\n        className=\"input input__lg\"\n        name=\"text\"\n        autoComplete=\"off\"\n        value={name}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n        Add\n      </button>\n    </form>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\n\nfunction FilterButton(props) {\n  return (\n    <button\n      type=\"button\"\n      className=\"btn toggle-btn\"\n      aria-pressed={props.isPressed}\n      onClick={() => props.setFilter(props.name)}\n    >\n      <span className=\"visually-hidden\">Show </span>\n      <span>{props.name}</span>\n      <span className=\"visually-hidden\"> tasks</span>\n    </button>\n  );\n}\n\nexport default FilterButton;\n","import React, { useState } from \"react\";\n\nexport default function Todo(props) {\n\n  const [newName, setNewName] = useState('');\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n  \n  const [isEditing, setEditing] = useState(false);\n  const editingTemplate = (\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <label className=\"todo-label\" htmlFor={props.id}>\n          To rename ' {props.name} ' to\n        </label>\n        <input\n          id={props.id}\n          className=\"todo-text\"\n          type=\"text\"\n          value={newName}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"btn-group\">\n      <button\n        type=\"button\"\n        className=\"btn todo-cancel\"\n        onClick={() => setEditing(false)}\n      >\n        Cancel\n        <span className=\"visually-hidden\">renaming {props.name}</span>\n      </button>\n    \n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n          Save\n          <span className=\"visually-hidden\">new name for {props.name}</span>\n        </button>\n      </div>\n    </form>\n  );\n\n  const viewTemplate = (\n    <div className=\"stack-small\">\n      <div className=\"c-cb\">\n          <input\n            id={props.id}\n            type=\"checkbox\"\n            defaultChecked={props.completed}\n            onChange={() => props.toggleTaskCompleted(props.id)}\n          />\n          <label className=\"todo-label\" htmlFor={props.id}>\n            {props.name}\n          </label>\n        </div>\n        <div className=\"btn-group\">\n        <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)}>\n          Edit <span className=\"visually-hidden\">{props.name}</span>\n        </button>\n      \n          <button\n            type=\"button\"\n            className=\"btn btn__danger\"\n            onClick={() => props.deleteTask(props.id)}\n          >\n            Delete <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n        </div>\n    </div>\n  );\n  \n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n\n  // return (\n  //   <li className=\"todo stack-small\">\n  //     <div className=\"c-cb\">\n  //       <input\n  //         id={props.id}\n  //         type=\"checkbox\"\n  //         defaultChecked={props.completed}\n  //         onChange={() => props.toggleTaskCompleted(props.id)}\n  //       />\n  //       <label className=\"todo-label\" htmlFor={props.id}>\n  //       {props.name}\n  //       </label>\n  //     </div>\n  //     <div className=\"btn-group\">\n  //       <button type=\"button\" className=\"btn\">\n  //         Edit <span className=\"visually-hidden\">{props.name}</span>\n  //       </button>\n  //       <button\n  //         type=\"button\"\n  //         className=\"btn btn__danger\"\n  //         onClick={() => props.deleteTask(props.id)}\n  //       >\n  //         Delete <span className=\"visually-hidden\">{props.name}</span>\n  //       </button>\n      \n  //     </div>\n  //   </li>\n  // );\n}","import React, { useState } from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\nimport { nanoid } from \"nanoid\";\n\nconst FILTER_MAP = {\n  Active: task => !task.completed,\n  Completed: task => task.completed,\n  All: () => true\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n\n  \n  \n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n  \n\n  const [filter, setFilter] = useState('Active');\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} need to be done.`;\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>Let's do something!</h1>\n      <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst DATA = [];\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\nReactDOM.render(\n  <App tasks={DATA} />, \n  document.getElementById(\"root\")\n);"],"sourceRoot":""}